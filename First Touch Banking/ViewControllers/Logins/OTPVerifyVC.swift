//
//  OTPVerifyVC.swift
//  First Touch Banking
//
//  Created by Syed Uzair Ahmed on 23/11/2017.
//  Copyright Â© 2017 Syed Uzair Ahmed. All rights reserved.
//

import UIKit
import SkyFloatingLabelTextField
import Alamofire
//import AlamofireObjectMapper
import SwiftKeychainWrapper
import ObjectMapper
import FingerprintSDK

class OTPVerifyVC: BaseVC {
    //    var fingerPrintVerification: FingerPrintVerification!
    var fingerprintPngs : [Png]?
    var registrationToken: String!
    
    @IBOutlet weak var lblMain: UILabel!
    @IBOutlet weak var otpTextField: SkyFloatingLabelTextField!
    var verifyOTPInfo:VerifyOTP?
    var genericObj:GenericResponse?
    @IBOutlet weak var lblMainTitle: UILabel!
    var mainTitle:String?
    var FromProfileUpdate:Bool = false
    var ForTransactionConsent:Bool = false
    var userCnic : String?
    var genericResponse:GenericResponse?
    var sourceAccount:String?
    var uniqueStringResponse: String?
    
    @IBOutlet weak var lblOTPSEnd: UILabel!
    
    @IBOutlet weak var btnnext: UIButton!
    
    @IBOutlet weak var btnback: UIButton!
    @IBOutlet weak var btnresendotp: FTBButton!
    @IBOutlet weak var lblDetail: UILabel!
    static let networkManager = NetworkManager()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        Changelanguage()
        
        
        self.clearAllFields()
        
        if ForTransactionConsent == true{
            self.getOTPCallForConsent()
        }
        
        // Do any additional setup after loading the view.
    }
    
    func Changelanguage()
    {
        lblMain.text = "Enter OTP for Registration".addLocalizableString(languageCode: languageCode)
        lblOTPSEnd.text = "OTP has been sent via SMS".addLocalizableString(languageCode: languageCode)
        otpTextField.placeholder = "Enter OTP".addLocalizableString(languageCode: languageCode)
        lblDetail.text = "Enter the code sent on your mobile device manually.".addLocalizableString(languageCode: languageCode)
        btnnext.setTitle("NEXT".addLocalizableString(languageCode: languageCode), for: .normal)
        btnback.setTitle("Back".addLocalizableString(languageCode: languageCode), for: .normal)
        btnresendotp.setTitle("Tap here to receive OTP via Call".addLocalizableString(languageCode: languageCode), for: .normal)
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Utility Methods
    
    private func clearAllFields(){
        self.otpTextField.text = ""
    }
    
    // MARK: - Action Methods
    
    @IBAction func nextToEnterPass(_ sender: Any) {
        
        if otpTextField.text?.count == 0 {
            return
        }
        if self.ForTransactionConsent == true{
            self.sendTransactionConsent()
        }
        else if self.FromProfileUpdate == true{
            self.saveProfileUpdates()
        }
        else{
            self.verifyOTPCall()
        }
    }
    
    @IBAction func callForOtpPressed(_ sender: Any) {
        
        if ForTransactionConsent == true{
            self.getOTVCallForConsent()
        }
        if self.FromProfileUpdate == true{
            self.callForOTPForPrifleUpdate()
        }
        else{
            self.callForOTP()
        }
        
    }
    
    @IBAction func backButtonPressed(_ sender: Any) {
        if self.ForTransactionConsent == true{
            self.navigationController?.popToRootViewController(animated: true)
        }
        else{
            self.navigationController!.popViewController(animated: true)
        }
    }
    
    
    
    // MARK: - API CALL
    
    
    private func getOTPCallForConsent() {
        
        if !NetworkConnectivity.isConnectedToInternet(){
            self.showToast(title: "No Internet Available")
            return
        }
        
        showActivityIndicator()
        
        let compelteUrl = Constants.BASE_URL + "api/v1/Customers/\(self.sourceAccount!)/TransactionConsent/OTP"
        let header: HTTPHeaders = ["Accept":"application/json","Authorization":"Bearer \(DataManager.instance.accessToken!)"]
        
        print(header)
        print(compelteUrl)
        
        NetworkManager.sharedInstance.enableCertificatePinning()
        NetworkManager.sharedInstance.sessionManager?.request(compelteUrl, method: .get, encoding: URLEncoding.httpBody, headers:header).response { response in
            //        Object { (response: DataResponse<GenericResponse>) in
            
            //        Alamofire.request(compelteUrl, headers:header).responseObject { (response: DataResponse<GenericResponse>) in
            
            self.hideActivityIndicator()
            guard let data = response.data else { return }
            if let json = try? JSONSerialization.jsonObject(with: data, options: []) {
                if response.response?.statusCode == 200 {
                    self.genericResponse = Mapper<GenericResponse>().map(JSONObject: json)
                    
                    if self.genericResponse?.response == 0 {
                        
                    }
                    else {
                        if let messageErrorTrans = self.genericResponse?.message{
                            self.showDefaultAlert(title: "", message: messageErrorTrans)
                        }
                    }
                }
                else {
                    //                print(response.result.value)
                    print(response.response?.statusCode)
                    
                    if let messageErrorTrans = self.genericResponse?.message{
                        self.showDefaultAlert(title: "", message: messageErrorTrans)
                    }
                }
            }
        }
    }
    
    private func getOTVCallForConsent() {
        
        if !NetworkConnectivity.isConnectedToInternet(){
            self.showToast(title: "No Internet Available")
            return
        }
        
        showActivityIndicator()
        
        let compelteUrl = Constants.BASE_URL + "api/v1/Customers/\(self.sourceAccount!)/TransactionConsent/OTV"
        let header: HTTPHeaders = ["Accept":"application/json","Authorization":"Bearer \(DataManager.instance.accessToken!)"]
        
        print(header)
        print(compelteUrl)
        
        NetworkManager.sharedInstance.enableCertificatePinning()
        NetworkManager.sharedInstance.sessionManager?.request(compelteUrl, method: .get, encoding: URLEncoding.httpBody, headers:header).response { response in
            //            Object { (response: DataResponse<GenericResponse>) in
            
            //        Alamofire.request(compelteUrl, headers:header).responseObject { (response: DataResponse<GenericResponse>) in
            
            self.hideActivityIndicator()
            guard let data = response.data else { return }
            if let json = try? JSONSerialization.jsonObject(with: data, options: []) {
                if response.response?.statusCode == 200 {
                    self.genericResponse = Mapper<GenericResponse>().map(JSONObject: json)
                    //                self.genericResponse = response.result.value
                    if self.genericResponse?.response == 0 {
                        
                    }
                    else {
                        if let messageErrorTrans = self.genericResponse?.message{
                            self.showDefaultAlert(title: "", message: messageErrorTrans)
                        }
                    }
                }
                else {
                    //                print(response.result.value)
                    print(response.response?.statusCode)
                    
                    if let messageErrorTrans = self.genericResponse?.message{
                        self.showDefaultAlert(title: "", message: messageErrorTrans)
                    }
                }
            }
        }
    }
    
    private func callForOTP() {
        
        if !NetworkConnectivity.isConnectedToInternet(){
            self.showToast(title: "No Internet Available")
            return
        }
        showActivityIndicator()
        
        if FromProfileUpdate == true {
            if KeychainWrapper.standard.hasValue(forKey: "userCnic"){
                userCnic = KeychainWrapper.standard.string(forKey: "userCnic")
            }
        }
        else if ForTransactionConsent == true {
            if KeychainWrapper.standard.hasValue(forKey: "userCnic"){
                userCnic = KeychainWrapper.standard.string(forKey: "userCnic")
            }
        }
        else{
            userCnic = DataManager.instance.userCnic
        }
        
        
        let compelteUrl = Constants.BASE_URL + "api/v1/Customers/OTV"
        
        //   let params = []
        //       let header = ["Accept":"application/json","Content-Type":"application/x-www-form-urlencoded"]
        let header: HTTPHeaders = ["Accept":"application/json","Authorization":"Bearer \(DataManager.instance.regAccessToken!)","Content-Type":"application/x-www-form-urlencoded"]
        
        
        //     print(params)
        print(compelteUrl)
        print(DataManager.instance.stringHeader!)
        
        NetworkManager.sharedInstance.enableCertificatePinning()
        NetworkManager.sharedInstance.enableCertificatePinning()
        NetworkManager.sharedInstance.sessionManager?.request(compelteUrl, method: .get, encoding: URLEncoding.httpBody, headers:header).response { response in
            
            //        Alamofire.request(compelteUrl, method: .post , encoding: URLEncoding.httpBody, headers:header).responseObject { (response: DataResponse<GenericResponse>) in
            
            //       Alamofire.request(compelteUrl, method: .post , encoding: URLEncoding.httpBody, headers:header).responseObject { (response: DataResponse<GenericResponse>) in
            
            self.hideActivityIndicator()
            guard let data = response.data else { return }
            if let json = try? JSONSerialization.jsonObject(with: data, options: []) {
                self.genericObj = Mapper<GenericResponse>().map(JSONObject: json)
                
                if response.response?.statusCode == 200 {
                    if self.genericObj?.response == 2 || self.genericObj?.response == 1 {
                        
                        if let message = self.genericObj?.message{
                            self.showToast(title: message)
                        }
                    }
                }
                else {
                    //                    print(response.result.value)
                    print(response.response?.statusCode)
                }
            }
        }
    }
    
    private func callForOTPForPrifleUpdate() {
        
        if !NetworkConnectivity.isConnectedToInternet(){
            self.showToast(title: "No Internet Available")
            return
        }
        showActivityIndicator()
        
        if FromProfileUpdate == true {
            if KeychainWrapper.standard.hasValue(forKey: "userCnic"){
                userCnic = KeychainWrapper.standard.string(forKey: "userCnic")
            }
        }
        else if ForTransactionConsent == true {
            if KeychainWrapper.standard.hasValue(forKey: "userCnic"){
                userCnic = KeychainWrapper.standard.string(forKey: "userCnic")
            }
        }
        else{
            userCnic = DataManager.instance.userCnic
        }
        
        let compelteUrl = Constants.BASE_URL + "api/v1/Customers/Profile/OTV"
        
        
        let header: HTTPHeaders = ["Accept":"application/json","Authorization":"Bearer \(DataManager.instance.accessToken!)","Content-Type":"application/x-www-form-urlencoded"]
        
        
        //     print(params)
        print(compelteUrl)
        print(DataManager.instance.stringHeader!)
        
        NetworkManager.sharedInstance.enableCertificatePinning()
        NetworkManager.sharedInstance.sessionManager?.request(compelteUrl, method: .get, encoding: URLEncoding.httpBody, headers:header).response { response in
            //        Object { (response: DataResponse<GenericResponse>) in
            
            //
            //        Alamofire.request(compelteUrl, headers:header).responseObject { (response: DataResponse<GenericResponse>) in
            self.hideActivityIndicator()
            guard let data = response.data else { return }
            if let json = try? JSONSerialization.jsonObject(with: data, options: []) {
                self.genericObj = Mapper<GenericResponse>().map(JSONObject: json)
                if response.response?.statusCode == 200 {
                    
                    if self.genericObj?.response == 2 || self.genericObj?.response == 1 {
                        
                        if let message = self.genericObj?.message{
                            self.showToast(title: message)
                        }
                    }
                }
                else {
                    //                    print(response.result.value)
                    print(response.response?.statusCode)
                }
            }
        }
    }
    private func verifyOTPCall() {
        
        if !NetworkConnectivity.isConnectedToInternet(){
            self.showToast(title: "No Internet Available")
            return
        }
        showActivityIndicator()
        
        if (otpTextField.text?.isEmpty)! {
            otpTextField.text = ""
        }
        
        let compelteUrl = Constants.BASE_URL + "api/v1/Customers/OTP"
        
        if FromProfileUpdate == true {
            if KeychainWrapper.standard.hasValue(forKey: "userCnic"){
                userCnic = KeychainWrapper.standard.string(forKey: "userCnic")
            }
        }
        else if ForTransactionConsent == true {
            if KeychainWrapper.standard.hasValue(forKey: "userCnic"){
                userCnic = KeychainWrapper.standard.string(forKey: "userCnic")
            }
        }
        else{
            userCnic = DataManager.instance.userCnic
        }
        
        let params = ["otp":otpTextField.text!]
        
        //      let header = ["Accept":"application/json","Content-Type":"application/x-www-form-urlencoded"]
        let header: HTTPHeaders = ["Accept":"application/json","Authorization":"Bearer \(DataManager.instance.regAccessToken!)","Content-Type":"application/x-www-form-urlencoded"]
        
        
        print(params)
        print(compelteUrl)
        print(DataManager.instance.stringHeader!)
        
        NetworkManager.sharedInstance.enableCertificatePinning()
        NetworkManager.sharedInstance.sessionManager?.request(compelteUrl, method: .post , parameters: params, encoding: URLEncoding.httpBody, headers:header).response { response in
            //            Object { (response: DataResponse<VerifyOTP>) in
            
            //        Alamofire.request(compelteUrl, method: .post, parameters: params , encoding: URLEncoding.httpBody, headers:header).responseObject { (response: DataResponse<VerifyOTP>) in
            //
            self.hideActivityIndicator()
            guard let data = response.data else { return }
            if let json = try? JSONSerialization.jsonObject(with: data, options: []) {
                self.verifyOTPInfo = Mapper<VerifyOTP>().map(JSONObject: json)
                if response.response?.statusCode == 200 {
                    
                    
                    if self.verifyOTPInfo?.response == 2 || self.verifyOTPInfo?.response == 1 {
                        //CallSdk
                        //is ka success me OTPVerifyVC idhar jana ha
                        print(json)
                        DispatchQueue.main.async {
                            if self.verifyOTPInfo?.data?.step?.lowercased() == "password" {
                                self.openEnterPasswordVC()
                            }
                            else if self.verifyOTPInfo?.data?.step?.lowercased() == "nadra" {
                                self.fingerPrintVerification()
                            }
                            else if self.verifyOTPInfo?.data?.step?.lowercased() == "otp" {
                                self.otpTextField.text = ""
                            }
                            else {
                                
                                //                                var tempFingerPrintDictionary = [[String:Any]]()
                                //                                tempFingerPrintDictionary.append(
                                //                                    [
                                //                                     "FINGER_TEMPLATE":thumbOne,
                                //                                     "FINGER_INDEX":"1"
                                //    //                                 ,"TEMPLATE_TYPE":"WSQ"
                                //                                    ]
                                //                                )
                                //                                tempFingerPrintDictionary.append(
                                //                                    [
                                //                                     "FINGER_TEMPLATE":thumbTwo,
                                //                                     "FINGER_INDEX":"6"
                                //    //                                 ,"TEMPLATE_TYPE":"WSQ"
                                //                                    ]
                                //                                )
                                //                                self.bioVerisys(fingerprints: tempFingerPrintDictionary)
                            }
                        }
                    }
                    else {
                        if let message = self.verifyOTPInfo?.message {
                            self.showAlert(title: "", message: message, completion: nil)
                        }
                    }
                }
                else {
                    if let message = self.verifyOTPInfo?.message {
                        self.showAlert(title: "", message: message, completion: nil)
                    }
                    //                    print(response.result.value)
                    print(response.response?.statusCode)
                    
                    //                if let message =  self.shopInfo?.resultDesc{
                    //                    self.showAlert(title: Localized("error"), message: message, completion: nil)
                    //                }
                    //                else{
                    //                    self.showAlert(title: Localized("error"), message:Constants.ERROR_MESSAGE, completion: nil)
                    //                }
                }
            }
        }
    }
    
    func openEnterPasswordVC() {
        let nextVC = self.storyboard!.instantiateViewController(withIdentifier: "EnterPasswordVC") as! EnterPasswordVC
        if let key = self.verifyOTPInfo?.data?.unique_key {
            nextVC.uniqueKey = key
        }
        self.navigationController!.pushViewController(nextVC, animated: true)
    }
    var modelAcccountLevelUpgradeResponse: ModelAcccountLevelUpgradeResponse? {
        didSet {
            print(modelAcccountLevelUpgradeResponse)
            if modelAcccountLevelUpgradeResponse?.responsecode == 1 {
                NotificationCenter.default.post(name: Notification.Name("updateAccountLevel"), object: nil)
                
                //                self.showAlertCustomPopup(title: "Success", message: modelAcccountLevelUpgradeResponse?.messages ?? "SUCCESS FROM API") {_ in
                //
                //                }
            }
            else if modelAcccountLevelUpgradeResponse?.responsecode == 0 {
                //                self.showAlertCustomPopup(title: "Error", message: modelAcccountLevelUpgradeResponse?.messages ?? "No Message from API") {_ in
                //
                //                }
            }
            else {
                //                self.showAlertCustomPopup(title: "Error", message: "ERROR IN RESPONSE API") {_ in
                //
                //                }
            }
        }
    }
    
    func fingerPrintVerification() {
        //#if targetEnvironment(simulator)
        //        #else
        
        let customUI = CustomUI(
            topBarBackgroundImage: nil,
            topBarColor: UIColor.red,
            topBarTextColor: UIColor.white,
            containerBackgroundColor: UIColor.white,
            scannerOverlayColor: UIColor.green,
            scannerOverlayTextColor: UIColor.white,
            instructionTextColor: UIColor.white,
            buttonsBackgroundColor: UIColor.red,
            buttonsTextColor: UIColor.white,
            imagesColor: UIColor.green,
            isFullWidthButtons: true,
            guidanceScreenButtonText: "NEXT",
            guidanceScreenText: "User Demo",
            guidanceScreenAnimationFilePath: nil,
            showGuidanceScreen: true)
        
        let customDialog = CustomDialog(
            dialogImageBackgroundColor: UIColor.white,
            dialogImageForegroundColor: UIColor.green,
            dialogBackgroundColor: UIColor.white,
            dialogTitleColor: UIColor.green,
            dialogMessageColor: UIColor.black,
            dialogButtonTextColor: UIColor.white,
            dialogButtonBackgroundColor: UIColor.orange)
        
        let uiConfig = UIConfig(
            splashScreenLoaderIndicatorColor: UIColor.black,
            splashScreenText: "Please wait",
            splashScreenTextColor: UIColor.white,
            customUI: customUI,
            customDialog: customDialog,
            customFontFamily: nil)
        
        let fingerprintConfig = FingerprintConfig(mode: .EXPORT_WSQ,
                                                  hand: .BOTH_HANDS,
                                                  fingers: .TWO_THUMBS,
                                                  isPackPng: true, uiConfig: uiConfig)
        //        let fingerprintConfig = FingerprintConfig(
        //            mode: .EXPORT_WSQ,
        //            hand: .BOTH_HANDS,
        //            fingers: .TWO_THUMBS,
        //            liveness: true,
        //            isPackPng: false)
        
        let vc = FaceoffViewController.init(nibName: "FaceoffViewController", bundle: Bundle(for: FaceoffViewController.self))
        
        vc.fingerprintConfig = fingerprintConfig
        vc.fingerprintResponseDelegate = self
        DispatchQueue.main.asyncAfter(deadline: .now() + 0) {
            self.present(vc, animated: true, completion: nil)
        }
        
        //        #endif
    }
    
    private func sendTransactionConsent() {
        
        if !NetworkConnectivity.isConnectedToInternet(){
            self.showToast(title: "No Internet Available")
            return
        }
        
        showActivityIndicator()
        
        let compelteUrl = Constants.BASE_URL + "api/v1/Customers/TransactionConsent"
        
        let params = ["lat":DataManager.instance.Latitude!,"lng":DataManager.instance.Longitude!,"imei":DataManager.instance.imei!,"AccountNumber":self.sourceAccount!,"TransactionConsent":1,"TransactionOTP":self.otpTextField.text!] as [String : Any]
        
        let header: HTTPHeaders = ["Accept":"application/json","Authorization":"Bearer \(DataManager.instance.accessToken!)","Content-Type":"application/x-www-form-urlencoded"]
        
        print(params)
        print(compelteUrl)
        
        
        // Change Before Live
        
        //        NetworkManager.sharedInstance.enableCertificatePinning()
        //        Alamofire.request(compelteUrl, method: .post, parameters: params , encoding: URLEncoding.httpBody, headers:header).responseObject { (response: DataResponse<GenericResponse>) in
        //
        NetworkManager.sharedInstance.enableCertificatePinning()
        NetworkManager.sharedInstance.sessionManager?.request(compelteUrl, method: .post , parameters: params, encoding: URLEncoding.httpBody, headers:header).response { response in
            //             Alamofire.request(compelteUrl, method: .post, parameters: params , encoding: URLEncoding.httpBody, headers:header).responseObject { (response: DataResponse<GenericResponse>) in
            
            self.hideActivityIndicator()
            guard let data = response.data else { return }
            if let json = try? JSONSerialization.jsonObject(with: data, options: []) {
                self.genericResponse = Mapper<GenericResponse>().map(JSONObject: json)
                if response.response?.statusCode == 200 {
                    if self.genericResponse?.response == 2 || self.genericResponse?.response == 1 {
                        self.navigationController?.popViewController(animated: true)
                    }
                    else {
                        if let message = self.genericResponse?.message{
                            self.showDefaultAlert(title: "", message: message)
                        }
                        // self.showAlert(title: "", message: (self.shopInfo?.resultDesc)!, completion: nil)
                    }
                }
                else {
                    if let message = self.genericResponse?.message{
                        self.showDefaultAlert(title: "", message: message)
                    }
                    //                print(response.result.value)
                    print(response.response?.statusCode)
                }
            }
        }
    }
    
    public func saveProfileUpdates() {
        
        if !NetworkConnectivity.isConnectedToInternet(){
            self.showToast(title: "No Internet Available")
            return
        }
        
        showActivityIndicator()
        
        let compelteUrl = Constants.BASE_URL + "/api/v1/Customers/Profile"
        
        let params = ["customer_cnic":DataManager.instance.userCnic!,"customer_no":DataManager.instance.customer_no!,"mobile_number":DataManager.instance.mobile_number!,"email_address":DataManager.instance.email_address!,"current_address_line_1":DataManager.instance.current_address_line_1!,"current_address_line_2":DataManager.instance.current_address_line_2!,"current_address_line_3":DataManager.instance.current_address_line_3!,"correspondence_address_line_1":DataManager.instance.correspondence_address_line_1!,"correspondence_address_line_2":DataManager.instance.correspondence_address_line_2!,"correspondence_address_line_3":DataManager.instance.correspondence_address_line_3!,"marital_status":DataManager.instance.marital_status!,"country_of_birth":DataManager.instance.country_of_birth!,"country_of_stay":DataManager.instance.country_of_stay!,"country_of_tax_residence":DataManager.instance.country_of_tax_residence!,"otp":otpTextField.text!] as [String : Any]
        
        let header: HTTPHeaders = ["Accept":"application/json","Authorization":"Bearer \(DataManager.instance.accessToken!)","Content-Type":"application/x-www-form-urlencoded"]
        
        print(params)
        print(compelteUrl)
        
        NetworkManager.sharedInstance.enableCertificatePinning()
        AF.request(compelteUrl, method: .post, parameters: params , encoding: JSONEncoding.default, headers:header).response { response in
            //        Object { (response: DataResponse<GenericResponse>) in
            
            //        Alamofire.request(compelteUrl, method: .post, parameters: params , encoding: URLEncoding.httpBody, headers:header).responseObject { (response: DataResponse<GenericResponse>) in
            
            self.hideActivityIndicator()
            guard let data = response.data else { return }
            if let json = try? JSONSerialization.jsonObject(with: data, options: []) {
                self.genericResponse = Mapper<GenericResponse>().map(JSONObject: json)
                if response.response?.statusCode == 200 {
                    
                    if self.genericResponse?.response == 2 || self.genericResponse?.response == 1 {
                        // Success Message
                        if let message = self.genericResponse?.message{
                            self.showAlert(title: "", message: message, completion:{
                                let profileVC = self.storyboard?.instantiateViewController(withIdentifier: "MyProfileVC") as! MyProfileVC
                                self.navigationController!.pushViewController(profileVC, animated: true)
                            })
                        }
                    }
                    else {
                        if let message = self.genericResponse?.message{
                            self.showDefaultAlert(title: "", message: message)
                        }
                        // self.showAlert(title: ââ, message: (self.shopInfo?.resultDesc)!, completion: nil)
                    }
                }
                else {
                    if let message = self.genericResponse?.message{
                        self.showAlert(title: "", message: message, completion:{
                            let profileVC = self.storyboard?.instantiateViewController(withIdentifier: "MyProfileVC") as! MyProfileVC
                            self.navigationController!.pushViewController(profileVC, animated: true)
                        })
                    }
                    //                    print(response.result.value)
                    print(response.response?.statusCode)
                }
            }
        }
    }
}

//var thumbOne = "iVBORw0KGgoAAAANSUhEUgAAAZsAAAKUCAAAAAD3TcpsAAAgAElEQVR4AeS9d3gd1bU3vE/vvTedIx31asmy5I5xwYBtML0FQghcLk4P6T034UJuCknuDeHSAgkdbGMbg7stF1myrN6lo1N0eu+9vWuP7Lx5//zANjzPt/6Y2bPLzJ69Zq/1W2uXIZXR54zKsZwMoed+FkSoq1mpX9WC65f3lbX/t56xkTPnbXRaPxHz2F9ol1Km958a8uHwDVs3ty7FlZDr1Z/i4JefqOGRcMD/0q/SqO0H9+LwwICV3LFZjIOfR6L84nNWq3LYLOAg0+u44RU6EV+hgvb8w5O/em1mmeByVRmpUFHWulw8iSN4bBl3KYGeIjFRCD62YtyTVDFxJIlEDQ9EINAsziYyiXiBUohFXcx6oxGSc5Eygy+RCDIlytINPmdH0uer3+TJ2QBZQUu+9mPcoPesEjN1jayT35jBrcb4eQOJymJI6xBKjEU10DOmdvUg0go0E0OCe+9ZR0Vxr985NTrvi2YQ2nL7+hqiQyX3v9pD6mwTcyRicpam1eYmxwJ0uVotoFFolGwsh9I+XpuA9znjC67O54s37qiUywDR437pzwHEe/DO+myIKo6/+4ulhhNUkmkclrK9W5cKiSuX4iZ8to/eJ4K3PrJczIKQfXRq6MMkQpU3raxX8nFf881HCslAmslO+9KajjpGxB8I+BNUqb5SQY0H3JYFb2nTbcKl+32ejp8rmTZ/sMiSkXHz+Mmytbu+Ws8TSmjMcsJrJ5pMVYwFbBPDH/UOTdmLjUutKK9sX5MdwOFZV9iT1SAkqF3Trve7EEq7Zwf67Uoe4lTU1qslIiEzH3C4wmnEFgiomUg0XcgEF13RfKmQjswWqFz60h0/P8fPT7/xR3MfURSVRjk0TmrUlNd3XtIvRa9pMcOmZ1MRvz/onkoRjVe3fvPqf6KDl74XhkihjN+44zYqkTzVZwlFfCYrQj94mohAKBRNBudHZsO86pYGFSng8CRLhYA"
//
//var thumbTwo = "iVBORw0KGgoAAAANSUhEUgAAAaMAAAKVCAAAAABHNdsFAAAgAElEQVR4Aey9Z3hcx5Eo2pNzzjPAYAAMciIywACCOUlUTpaVnNeyrbV9vU7rXaeVdi1711rLUZYsWbKoRImkJJJiziQAIuc0mJxzzvOqD0BZvu++PytQpL936/umY50+3V3dVdXVfXpIBfT3AYXzzI6/remPfkh68IvrEbLMypr+Ngdii4Pe6s0fpkZJUYuX38j9MOHvKkD9e6mtebbkf6vqDCrE85DGoKX+muOze1NMIS+5MB1gfJgasiUDJjcnt5aCk7IF2oc5fxeBvxsaldCGyvTLXTpbhX3jCEJsYmakvOQm6PaJ9654ktEYRVFVqaI4zRGpV7pCAvu8x7FoIS8lunk+g5skkKp5Kzl/F97fDY1CwwOze28nQafu+0tqy0Ma1M9G+lJSiuacmbYMT1VQh/7Ut9zjJC1i8BhkJ9m+QqNITkghJ+PRRDSPLKfMan3YrKolo7Sfx/m/NFqlHvCMs2SuAwfMk2OHNnSJFwau+E48d3+9p61USL18ORqNenwsikQtwhSRNanFRZVlcporOzdtalM6hmyShqriBjHyLrq5nWyk5fB0jaxwfsl76appb0NhnWCVKnkdiyH9HegMD76KKMJIGnqB1tBdkZ846ENIsrOclgw6zfYEXy2gKzu3aDMf7J8Wd66vlRLS5tRv9l/rNcW9e7bj+bcMY/FWQIi7L750HCec7l1Ovpndm5rXeWS46069ilDOh0SKnCOHCpk8mQ808hkYvKhxxoZQWiWWl9cVI5qiMpMvIMEyiZ459GGvuyxGY+m1WCjJB4RYKJrj0DHV36Z1EA9cy78Z/ZuXRkNGsucWFfTZOaLfKpu0OXuhdg3PYsDamaTgj0aDFCmFr9AIuczEVGD4woCxUDTn6CxihEYPvPdhZ1MbKYunLdKcy+zPk0LWuLyY7IpKiqhNzOFZhH4VX/ch5s0auHlpdOU1n3K6Ts22QU8iemNjo57myWiU4aD"





extension  OTPVerifyVC: FingerprintResponseDelegate {
    func onScanComplete(fingerprintResponse: FingerprintResponse) {
        //Shakeel ! added
        if fingerprintResponse.response == Response.SUCCESS_WSQ_EXPORT {
            //            print(fingerprintResponse.response)
            //            print(fingerprintResponse.response)
            
            
            fingerprintPngs = fingerprintResponse.pngList
            var fingerprintsList = [Fingerprints]()
            
            var tempFingerPrintDictionary = [[String:Any]]()
            if let fpPNGs = fingerprintPngs {
                for item in fpPNGs {
                    guard let imageString = item.binaryBase64ObjectPNG else { return }
                    guard let instance = Fingerprints(fingerIndex: "\(item.fingerPositionCode)", fingerTemplate: imageString) else { return }
                    
                    tempFingerPrintDictionary.append(
                        ["FINGER_INDEX":"\(item.fingerPositionCode)",
                         "FINGER_TEMPLATE":imageString,
                         "templateType":"WSQ"]
                    )
                }
            }
            self.bioVerisys(fingerprints: tempFingerPrintDictionary)
        }
        else {
//            self.showDefaultAlert(title: "Faceoff Results", message: fingerprintResponse.response.message)
            //            self.showAlertCustomPopup(title: "Faceoff Results", message: fingerprintResponse.response.message, iconName: .iconError) {_ in
            //                self.dismiss(animated: true)
            //            }
            
            let actionSheetController = UIAlertController (title: "Faceoff Results", message: fingerprintResponse.response.message, preferredStyle: UIAlertControllerStyle.actionSheet)

                //Add OK-Action
            actionSheetController.addAction(UIAlertAction(title: "OK", style: UIAlertActionStyle.default, handler: { (actionSheetController) -> Void in

                    self.fingerPrintVerification()
                }))

                //present actionSheetController
            self.present(actionSheetController, animated: true, completion: nil)
        }
    }
    
    override func motionCancelled(_ motion: UIEventSubtype, with event: UIEvent?) {
        self.dismiss(animated: true)
    }
    
}
extension OTPVerifyVC {
    // MARK: - ModelFingerPrintResponse
    struct ModelAcccountLevelUpgradeResponse: Codable {
        let responsecode: Int
        let data, responseblock: JSONNull?
        let messages: String
    }
    
    // MARK: - Encode/decode helpers
    
    class JSONNull: Codable, Hashable {
        
        public static func == (lhs: JSONNull, rhs: JSONNull) -> Bool {
            return true
        }
        
        public var hashValue: Int {
            return 0
        }
        
        public init() {}
        
        public required init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if !container.decodeNil() {
                throw DecodingError.typeMismatch(JSONNull.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for JSONNull"))
            }
        }
        
        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            try container.encodeNil()
        }
    }
    
    struct Fingerprints: Codable {
        var fingerIndex: String
        var fingerTemplate: String
        var templateType: String
        
        init?(fingerIndex: String, fingerTemplate: String) {
            self.fingerIndex = fingerIndex
            self.fingerTemplate = fingerTemplate
            self.templateType = ""
        }
    }
}

extension OTPVerifyVC {
    private func bioVerisys(fingerprints: [[String:Any]]) {
        
        if !NetworkConnectivity.isConnectedToInternet(){
            self.showToast(title: "No Internet Available")
            return
        }
        showActivityIndicator()
        let compelteUrl = Constants.BASE_URL + "api/v1/Customers/BioVerisys"
        let jsonDataaa = try! JSONSerialization.data(withJSONObject: fingerprints as Any, options: .prettyPrinted)
        let decoded = try! JSONSerialization.jsonObject(with: jsonDataaa, options: [])
        print(decoded)
        if let dicFromJson = decoded as? [[String:Any]] {
            print(dicFromJson)
            print(dicFromJson)
        }
        let decoded2 = try! JSONSerialization.jsonObject(with: jsonDataaa, options: .fragmentsAllowed)
        print(decoded2)
        if let dicFromJson = decoded2 as? [[String:Any]] {
            print(dicFromJson)
            print(dicFromJson)
        }
        //        if let jsonsss = try? JSONSerialization.jsonObject(with: jsonDataaa2, options: []) {
        //            print(jsonsss)
        //            print(jsonsss)
        //        }
        let params = [
            "TEMPLATE_TYPE": "WSQ",
            //            "TEMPLATE_TYPE": "ISO_19794_2",
            "LOCATION_LAT": "33.6844",
            "LOCATION_LONG": "73.0479",
            "imei":"\(DataManager.instance.imei ?? "")",
            "nadra":decoded
        ] as [String : Any]
        let jsonDataaaParams = try! JSONSerialization.data(withJSONObject: params as Any, options: .prettyPrinted)
        print(jsonDataaaParams)
        let decoded3 = try! JSONSerialization.jsonObject(with: jsonDataaaParams, options: [])
        print(decoded3)
        if let dicFromJson = decoded3 as? [[String:Any]] {
            print(dicFromJson)
            print(dicFromJson)
        }
        
        
        //        let params = [
        //            "TEMPLATE_TYPE": "ISO_19794_2",
        //            "LOCATION_LAT": "\(DataManager.instance.Latitude!)",
        //            "LOCATION_LONG": "DataManager.instance.Longitude!",
        //            "imei":"\(DataManager.instance.imei ?? "")",
        //            "nadra":decoded
        //        ]
        
        let header: HTTPHeaders = [
            "Accept":"application/json",
            "Content-Type":"application/json",
            "Authorization":"Bearer \(DataManager.instance.regAccessToken!)"]
        print("Parameters Before Sending: \(params)")
        print("Url Before Sending: \(compelteUrl)")
        print("Token Before Sending: \(DataManager.instance.stringHeader!)")
        
        NetworkManager.sharedInstance.enableCertificatePinning()
        let url = URL(string: compelteUrl)!
        
        var request = URLRequest(url: url)
        request.httpMethod = HTTPMethod.post.rawValue
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Authorization", forHTTPHeaderField: "Bearer \(DataManager.instance.regAccessToken!)")
        
        let jsonDataaa2 = try! JSONSerialization.data(withJSONObject: params as Any, options: .prettyPrinted)
        request.httpBody = jsonDataaa2
        if let jsonsss = try? JSONSerialization.jsonObject(with: jsonDataaa2, options: []) {
            print(jsonsss)
            print(jsonsss)
        }
        
        NetworkManager.sharedInstance.sessionManager?.request(request.url!, method: .post, parameters: params , encoding: JSONEncoding.default, headers:header).response { response in
            
            //        NetworkManager.sharedInstance.serverRequest().request(compelteUrl, method: .post, parameters: params , encoding: URLEncoding.httpBody, headers:header).response { response in
            //        Object { (response: DataResponse<Registeration>) in
            
            //     Alamofire.request(compelteUrl, method: .post, parameters: params , encoding: URLEncoding.httpBody, headers:header).responseObject { (response: DataResponse<Registeration>) in
            
            self.hideActivityIndicator()
            guard let data = response.data else { return }
            if let json = try? JSONSerialization.jsonObject(with: data, options: []) {
                //                self.registerInfo = Mapper<Registeration>().map(JSONObject: json)
                print(json)
                if response.response?.statusCode == 200 {
                    self.openEnterPasswordVC()
                    
                    //                    if self.registerInfo?.response == 2 || self.registerInfo?.response == 1 {
                    //                        if let accessToken = self.registerInfo?.data?.token {
                    //                            DataManager.instance.regAccessToken = accessToken
                    //                        }
                    //                        let OTPVerifyVC = self.storyboard!.instantiateViewController(withIdentifier: "OTPVerifyVC") as! OTPVerifyVC
                    //                        OTPVerifyVC.mainTitle = "Enter OTP for Registration"
                    //                        self.navigationController!.pushViewController(OTPVerifyVC, animated: true)
                    //                    }
                    //                    else {
                    //                        if let message = self.registerInfo?.message{
                    //                            self.showAlert(title: "", message: message, completion: {
                    //                                let OTPVerifyVC = self.storyboard!.instantiateViewController(withIdentifier: "OTPVerifyVC") as! OTPVerifyVC
                    //                                OTPVerifyVC.mainTitle = "Enter OTP for Registration"
                    //                                self.navigationController!.pushViewController(OTPVerifyVC, animated: true)})
                    //                        }
                    //                    }
                }
                else {
                    //                    if let message = self.registerInfo?.mobile_number{
                    //                        self.showDefaultAlert(title: "", message: message)
                    //                    }
                    //                    if let message = self.registerInfo?.cnic{
                    //                        self.showDefaultAlert(title: "", message: message)
                    //                    }
                    //                    if let message = self.registerInfo?.mobile_number{
                    //                        self.showDefaultAlert(title: "", message: message)
                    //                    }
                    //                    if let message = self.registerInfo?.message{
                    //                        self.showDefaultAlert(title: "Error", message: message)
                    //                    }
                    //                    let modelErrorBioVerisys = Mapper<ModelErrorBioVerisys>().map(JSONObject: json)
                    
                    let model: ModelErrorBioVerisys? = self.decodeDataToObject(data: response.data)
                    
//                    self.showDefaultAlert(title: "Error", message: model?.data.responseStatus.message ?? "")
                    
                    let actionSheetController = UIAlertController (title: "Error", message: model?.data.responseStatus.message ?? "", preferredStyle: UIAlertControllerStyle.actionSheet)

                        //Add OK-Action
                    actionSheetController.addAction(UIAlertAction(title: "OK", style: UIAlertActionStyle.default, handler: { (actionSheetController) -> Void in

                            self.fingerPrintVerification()
                        }))

                        //present actionSheetController
                    self.present(actionSheetController, animated: true, completion: nil)
                    
                }
                //                    print(response.result.value)
                print(response.response?.statusCode)
            }
        }
    }
    func decodeDataToObject<T: Codable>(data : Data?)->T?{
        if let dt = data{
            do{
                return try JSONDecoder().decode(T.self, from: dt)
                
            }  catch let DecodingError.dataCorrupted(context) {
                print(context)
            } catch let DecodingError.keyNotFound(key, context) {
                print("Key '\(key)' not found:", context.debugDescription)
                print("codingPath:", context.codingPath)
            } catch let DecodingError.valueNotFound(value, context) {
                print("Value '\(value)' not found:", context.debugDescription)
                print("codingPath:", context.codingPath)
            } catch let DecodingError.typeMismatch(type, context)  {
                print("Type '\(type)' mismatch:", context.debugDescription)
                print("codingPath:", context.codingPath)
            } catch {
                print("error: ", error)
            }
        }
        return nil
    }
}


//var modelErrorBioVerisys: ModelErrorBioVerisys! {
//    didSet {
//        self.showDefaultAlert(title: "Error", message:
//
//    }
//}
extension OTPVerifyVC {
    // MARK: - ModelErrorBioVerisys
    struct ModelErrorBioVerisys: Codable {
        let response: Int
        let message: String
        let data: DataClass
    }
    
    // MARK: - DataClass
    struct DataClass: Codable {
        let responseStatus: ResponseStatus
        let transactionID, sessionID, citizenNumber: String
        let fingerIndex: FingerIndex
        
        enum CodingKeys: String, CodingKey {
            case responseStatus = "RESPONSE_STATUS"
            case transactionID = "TRANSACTION_ID"
            case sessionID = "SESSION_ID"
            case citizenNumber = "CITIZEN_NUMBER"
            case fingerIndex = "FINGER_INDEX"
        }
    }
    
    // MARK: - FingerIndex
    struct FingerIndex: Codable {
        let finger: [Int]
        
        enum CodingKeys: String, CodingKey {
            case finger = "FINGER"
        }
    }
    
    // MARK: - ResponseStatus
    struct ResponseStatus: Codable {
        let code: Int
        let message: String
        
        enum CodingKeys: String, CodingKey {
            case code = "CODE"
            case message = "MESSAGE"
        }
    }
    
}


















var thumbOne = ""

var thumbTwo = "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"
